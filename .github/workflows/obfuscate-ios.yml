name: obfuscate code ios

on:
  workflow_call:
    inputs:
      vars_file:
        required: true
        type: string


jobs:
  obfuscate:
    runs-on: macos-latest

    outputs:
      SCHEME: ${{ steps.load-vars.outputs.SCHEME }}
      ORG: ${{ steps.load-vars.outputs.ORG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: LOAD VARIABLES
        id: load-vars
        run: |
          # ------------> Loading variables...
          echo "SCHEME=$(yq e .variables.SCHEME ${{ inputs.vars_file }})" >> $GITHUB_OUTPUT
          echo "ORG=$(yq e .variables.ORG ${{ inputs.vars_file }})" >> $GITHUB_OUTPUT
          
          # echo "SCHEME=${SCHEME}" >> $GITHUB_OUTPUT
          # echo "ORG=${ORG}" >> $GITHUB_OUTPUT

      - name: SHOW VARIABLES
        run: |
          # ------------> showing variables...
          echo "SCHEME: ${{ steps.load-vars.outputs.SCHEME }}"
          echo "ORG: ${{ steps.load-vars.outputs.ORG }}"
      
      - name: RUN OBFUSCATE
        run: |
          # ------------> obfuscation application...
          # echo "SCHEME: ${{ steps.load-vars.outputs.SCHEME }}"
          # echo "ORG: ${{ steps.load-vars.outputs.ORG }}"

          echo "$SCHEME"
          echo "$ORG"
        env:
          SCHEME: ${{ steps.load-vars.outputs.SCHEME }}
          ORG: ${{ steps.load-vars.outputs.ORG }}

  
  post-obfuscate:
    needs: obfuscate
    runs-on: ubuntu-latest
    steps:
      - name: Runs on anhother runner
        run: |
          # -----------> Show variables another runner
          echo "SCHEME: ${{ needs.obfuscate.outputs.SCHEME }}"
          echo "ORG: ${{ needs.obfuscate.outputs.ORG }}"
          echo "----------------> Teste vars"
          ${{ env.SCHEME }}
          ${{ env.ORG }}


